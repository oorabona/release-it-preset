name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      increment:
        description: 'Version increment type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: read

jobs:
  build-dist:
    uses: ./.github/workflows/build-dist.yml
    with:
      artifact_name: dist-build

  tests:
    name: Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs: build-dist

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-dist.outputs.artifact_name }}
          path: dist

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-cli:
    name: Test CLI
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs: [build-dist, tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for check-config

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-dist.outputs.artifact_name }}
          path: dist

      - name: Test CLI help
        run: node bin/cli.js --help

      - name: Test CLI unknown command
        run: |
          if node bin/cli.js unknown-command 2>&1 | grep -q "Unknown command"; then
            echo "✅ CLI properly rejects unknown commands"
          else
            echo "❌ CLI should reject unknown commands"
            exit 1
          fi

      - name: Test check command
        run: node dist/scripts/check-config.js

      - name: Test init and validate commands in temp project
        run: |
          PROJECT_DIR=$(mktemp -d)
          pushd "$PROJECT_DIR" >/dev/null

          git init
          git config user.name "Test User"
          git config user.email "test@example.com"

          cat <<'PKG' > package.json
          {
            "name": "ci-fixture",
            "version": "0.0.0",
            "private": true
          }
          PKG

          node $GITHUB_WORKSPACE/bin/cli.js init --yes

          test -f CHANGELOG.md
          test -f .release-it.json

          NPM_TOKEN=dummy-ci-token node $GITHUB_WORKSPACE/dist/scripts/validate-release.js --allow-dirty

          popd >/dev/null

          echo "✅ Init and validate commands succeeded in temp project"

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: build-dist
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Configure npm authentication
        run: npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-dist.outputs.artifact_name }}
          path: dist

      - name: Run pnpm release-it-preset check
        run: pnpm release-it-preset check

      # We populate the changelog before validation to ensure [Unreleased] section is not empty
      # which would cause validate to fail
      - name: Populate changelog
        run: pnpm release-it-preset update

      # But since changelog population creates a modification, the working directory
      # is no longer clean, so we need to validate with --allow-dirty
      # Alternatively, we could commit the changelog update, but that would create noise
      # in the commit history for every release
      - name: Validate release readiness
        run: pnpm release-it-preset validate --allow-dirty

      - name: Run release and publish
        run: pnpm release-it-preset default --ci --increment ${{ inputs.increment }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_PUBLISH: 'true'      # ✅ Publish to npm with provenance
          GITHUB_RELEASE: 'true'   # ✅ Create GitHub Release

      - name: Display release and publish info
        run: |
          echo "✅ Release and publish completed successfully"
          echo "Version: $(node -p \"require('./package.json').version\")"
          echo "Tag: $(git describe --tags --abbrev=0)"
          echo "npm: https://www.npmjs.com/package/@oorabona/release-it-preset"
          echo "GitHub: https://github.com/${{ github.repository }}/releases/tag/$(git describe --tags --abbrev=0)"
