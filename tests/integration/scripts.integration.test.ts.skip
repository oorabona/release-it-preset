import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { execSync } from 'node:child_process';
import { mkdtempSync, rmSync, writeFileSync, readFileSync, existsSync } from 'node:fs';
import { join } from 'node:path';
import { tmpdir } from 'node:os';

/**
 * Integration tests for scripts with real git repository
 *
 * These tests create temporary git repositories and test the scripts
 * with actual git operations, providing end-to-end validation.
 */

describe('Scripts Integration Tests', () => {
  let testDir: string;

  beforeEach(() => {
    // Create temporary directory for test repository
    testDir = mkdtempSync(join(tmpdir(), 'release-it-preset-test-'));

    // Initialize git repository
    execSync('git init', { cwd: testDir });
    execSync('git config user.email "test@example.com"', { cwd: testDir });
    execSync('git config user.name "Test User"', { cwd: testDir });
    execSync('git config commit.gpgsign false', { cwd: testDir }); // Disable GPG signing
    execSync('git remote add origin https://github.com/test/repo.git', { cwd: testDir });

    // Create initial commit
    writeFileSync(join(testDir, 'README.md'), '# Test Repository');
    execSync('git add .', { cwd: testDir });
    execSync('git commit -m "feat: initial commit"', { cwd: testDir });
    execSync('git tag v0.1.0', { cwd: testDir });
  });

  afterEach(() => {
    // Clean up temporary directory
    if (testDir && existsSync(testDir)) {
      rmSync(testDir, { recursive: true, force: true });
    }
  });

  describe('populate-unreleased-changelog.ts', () => {
    it('should populate changelog with commits since last tag', () => {
      // Create CHANGELOG.md
      const changelogContent = `# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

No changes yet.

## [0.1.0] - 2024-01-01

- Initial release
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add CHANGELOG.md', { cwd: testDir });
      execSync('git commit -m "docs: add changelog"', { cwd: testDir });

      // Add some commits
      writeFileSync(join(testDir, 'feature.txt'), 'new feature');
      execSync('git add feature.txt', { cwd: testDir });
      execSync('git commit -m "feat: add new feature"', { cwd: testDir });

      writeFileSync(join(testDir, 'bugfix.txt'), 'bug fixed');
      execSync('git add bugfix.txt', { cwd: testDir });
      execSync('git commit -m "fix: resolve critical bug"', { cwd: testDir });

      // Run populate-unreleased-changelog
      const scriptPath = join(process.cwd(), 'scripts', 'populate-unreleased-changelog.ts');
      execSync(`pnpm tsx ${scriptPath}`, { cwd: testDir, stdio: 'pipe' });

      // Verify changelog was updated
      const updatedChangelog = readFileSync(join(testDir, 'CHANGELOG.md'), 'utf8');
      expect(updatedChangelog).toContain('### Added');
      expect(updatedChangelog).toContain('add new feature');
      expect(updatedChangelog).toContain('### Fixed');
      expect(updatedChangelog).toContain('resolve critical bug');
      expect(updatedChangelog).not.toContain('No changes yet.');
    });

    it('should handle multiple conventional commits in one commit message', () => {
      const changelogContent = `# Changelog

## [Unreleased]

No changes yet.
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add CHANGELOG.md', { cwd: testDir });
      execSync('git commit -m "chore: add changelog"', { cwd: testDir });

      // Commit with multiple conventional commit prefixes
      writeFileSync(join(testDir, 'multi.txt'), 'multiple changes');
      execSync('git add multi.txt', { cwd: testDir });
      execSync(
        'git commit -m "feat: add feature A\nfix: resolve bug B\nchore: update docs"',
        { cwd: testDir },
      );

      const scriptPath = join(process.cwd(), 'scripts', 'populate-unreleased-changelog.ts');
      execSync(`pnpm tsx ${scriptPath}`, { cwd: testDir, stdio: 'pipe' });

      const updatedChangelog = readFileSync(join(testDir, 'CHANGELOG.md'), 'utf8');
      expect(updatedChangelog).toContain('### Added');
      expect(updatedChangelog).toContain('add feature A');
      expect(updatedChangelog).toContain('### Fixed');
      expect(updatedChangelog).toContain('resolve bug B');
      expect(updatedChangelog).toContain('### Changed');
      expect(updatedChangelog).toContain('update docs');
    });

    it('should skip commits with [skip-changelog] marker', () => {
      const changelogContent = `# Changelog

## [Unreleased]

No changes yet.
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add CHANGELOG.md', { cwd: testDir });
      execSync('git commit -m "chore: add changelog"', { cwd: testDir });

      writeFileSync(join(testDir, 'skip.txt'), 'should be skipped');
      execSync('git add skip.txt', { cwd: testDir });
      execSync('git commit -m "[skip-changelog] feat: internal change"', { cwd: testDir });

      const scriptPath = join(process.cwd(), 'scripts', 'populate-unreleased-changelog.ts');
      execSync(`pnpm tsx ${scriptPath}`, { cwd: testDir, stdio: 'pipe' });

      const updatedChangelog = readFileSync(join(testDir, 'CHANGELOG.md'), 'utf8');
      expect(updatedChangelog).toContain('No changes yet.');
      expect(updatedChangelog).not.toContain('internal change');
    });
  });

  describe('extract-changelog.ts', () => {
    it('should extract specific version from changelog', () => {
      const changelogContent = `# Changelog

## [Unreleased]

No changes yet.

## [v1.0.0] - 2024-01-15

### Added
- New feature X
- New feature Y

### Fixed
- Bug Z

## [v0.9.0] - 2024-01-01

- Initial beta release
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);

      const scriptPath = join(process.cwd(), 'scripts', 'extract-changelog.ts');
      const result = execSync(`pnpm tsx ${scriptPath} 1.0.0`, {
        cwd: testDir,
        encoding: 'utf8',
      });

      expect(result).toContain('# Release v1.0.0');
      expect(result).toContain('## [v1.0.0] - 2024-01-15');
      expect(result).toContain('### Added');
      expect(result).toContain('New feature X');
      expect(result).toContain('### Fixed');
      expect(result).toContain('Bug Z');
      expect(result).not.toContain('v0.9.0');
      expect(result).not.toContain('Unreleased');
    });
  });

  describe('validate-release.ts', () => {
    it('should pass all validations when repository is ready', () => {
      const changelogContent = `# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/).

## [Unreleased]

### Added
- New feature ready for release

## [v0.1.0] - 2024-01-01

- Initial release
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add .', { cwd: testDir });
      execSync('git commit -m "docs: prepare changelog for release"', { cwd: testDir });

      const scriptPath = join(process.cwd(), 'scripts', 'validate-release.ts');

      // Should not throw (exit code 0)
      expect(() => {
        execSync(`pnpm tsx ${scriptPath}`, {
          cwd: testDir,
          stdio: 'pipe',
          env: { ...process.env, GIT_REQUIRE_BRANCH: '' }, // Disable branch check
        });
      }).not.toThrow();
    });

    it('should fail when working directory is dirty', () => {
      const changelogContent = `# Changelog

## [Unreleased]

### Added
- New feature

https://keepachangelog.com/
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add CHANGELOG.md', { cwd: testDir });
      execSync('git commit -m "docs: add changelog"', { cwd: testDir });

      // Create uncommitted change
      writeFileSync(join(testDir, 'dirty.txt'), 'uncommitted');

      const scriptPath = join(process.cwd(), 'scripts', 'validate-release.ts');

      // Should throw (exit code 1)
      expect(() => {
        execSync(`pnpm tsx ${scriptPath}`, {
          cwd: testDir,
          stdio: 'pipe',
          env: { ...process.env, GIT_REQUIRE_BRANCH: '' },
        });
      }).toThrow();
    });

    it('should pass with --allow-dirty flag', () => {
      const changelogContent = `# Changelog

## [Unreleased]

### Added
- New feature

https://keepachangelog.com/
`;
      writeFileSync(join(testDir, 'CHANGELOG.md'), changelogContent);
      execSync('git add CHANGELOG.md', { cwd: testDir });
      execSync('git commit -m "docs: add changelog"', { cwd: testDir });

      // Create uncommitted change
      writeFileSync(join(testDir, 'dirty.txt'), 'uncommitted');

      const scriptPath = join(process.cwd(), 'scripts', 'validate-release.ts');

      // Should not throw with --allow-dirty
      expect(() => {
        execSync(`pnpm tsx ${scriptPath} --allow-dirty`, {
          cwd: testDir,
          stdio: 'pipe',
          env: { ...process.env, GIT_REQUIRE_BRANCH: '' },
        });
      }).not.toThrow();
    });
  });
});
